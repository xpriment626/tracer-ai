[tool:pytest]
# pytest configuration for Customer Churn Detection MVP testing

# Minimum pytest version
minversion = 7.0

# Test discovery patterns
testpaths = tests

# Python files and directories
python_files = test_*.py *_test.py
python_functions = test_*
python_classes = Test* *Test

# Add source directories to Python path
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov=src/tracer
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-fail-under=80
    --durations=10
    --color=yes

# Marker definitions
markers =
    unit: Unit tests - test individual components in isolation
    integration: Integration tests - test component interactions
    performance: Performance tests - test system performance and load
    security: Security tests - test security measures and vulnerabilities
    slow: Slow running tests (> 5 seconds)
    async: Asynchronous tests requiring async/await
    data_quality: Tests for data validation and quality checks
    ml_models: Tests for machine learning model components
    api: Tests for API endpoints and request handling
    file_processing: Tests for file upload and processing workflows
    validation: Tests for data validation logic
    prediction: Tests for prediction and inference functionality

# Test filtering options
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    # Suppress specific warnings from third-party libraries
    ignore::FutureWarning:pandas.*
    ignore::FutureWarning:sklearn.*
    ignore::FutureWarning:xgboost.*

# Asyncio configuration
asyncio_mode = auto

# Log configuration for tests
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# File collection ignore patterns
collect_ignore = [
    "setup.py",
    "conftest.py"
]

# Timeout for tests (prevent hanging tests)
timeout = 300  # 5 minutes maximum per test

# Minimum coverage per file
# These files must maintain high coverage
[coverage:run]
source = src/tracer
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */migrations/*
    */venv/*
    */env/*
    */.venv/*
    setup.py

[coverage:report]
# Coverage reporting configuration
precision = 2
show_missing = true
skip_covered = false
sort = Cover

# Exclude lines from coverage
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

# Fail if coverage falls below minimum
fail_under = 80

[coverage:html]
directory = htmlcov
title = Customer Churn Detection MVP Test Coverage

[coverage:xml]
output = coverage.xml